Package appel.ch03;

Helpers
	any = [0..0xffff];
	eol = (10 | 13 | 10 13);
	letter = [['a'..'z']+['A'..'Z']];
	alpha = letter | '_';
	digit = ['0'..'9'];
	alphanum = alpha | digit;
	nonzero = ['1'..'9'] digit*;
	star = '*';
	nonstar = [any - star];
	nonquote = [any - '"'];
	exponent = ('e' | 'E') ('+' | '-')? nonzero?;
	escapedchar = '\\' | '\' ''' | '\"' | '\t' | '\n';

Tokens
	// Symbols
	comma = ','; colon = ':'; semi = ';'; bang = '!'; dot = '.';
	lparen = '('; rparen = ')'; lbrack = '['; rbrack = ']'; lbrace = '{'; rbrace = '}';
	plus = '+'; minus = '-'; times = '*'; divide = '/'; mod = '%';
	pluseq = '+='; minuseq = '-='; timeseq = '*='; divideeq = '/='; modeq = '%=';
	eqeq = '=='; neq = '!='; lt = '<'; le = '<='; gt = '>'; ge = '>=';
	and = '&&'; or = '||'; eq = '=';
	inc = '++'; dec = '--';

	// Reserved
	println = 'System.out.println'; length = 'length';
	if = 'if'; else = 'else';
	for = 'for'; do = 'do'; while = 'while'; break = 'break';
	new = 'new'; throw = 'throw'; try = 'try'; catch = 'catch'; finally = 'finally';
	classkeyword = 'class'; interface = 'interface'; extends = 'extends'; implements = 'implements';
	this = 'this'; instanceof = 'instanceof';
	return = 'return'; true = 'true'; false = 'false'; null = 'null';
	void = 'void'; int = 'int'; boolean = 'boolean'; stringtype = 'String';

	// Numbers
	integer = '0' | nonzero;
	octal = '0' ['0'..'7']*;
	hex = '0x' [digit + [['a'..'f'] + ['A'..'F']]]+;
	float = 
		(digit+ '.' digit* exponent? ) | 
		(digit* '.' digit+ exponent? ) |
		(digit+ exponent);
	
	// Strings
	char = ''' (escapedchar | any) ''';
	string = '"' nonquote* (escapedchar+ nonquote*)* '"';	
	
	// Identifier
	id = alpha alphanum*;

	// Whitespace/comments
	whitespace = (' ' | '\t' | eol)+;
	comment = 
		('//' [any - [10 + 13]]* eol?) |
		('/*' nonstar* (star+ [any - '/'] nonstar*)* star* '*/');

Ignored Tokens
	whitespace,
	comment;

Productions
	// Top-level program (one .java file)
	prog = class_or_interface_def+;
	class_or_interface_def = 
		{class} class_def |
		{interface} interface_def;
	
	// Classes and interfaces
	interface_def = interface id lbrace member_decl* rbrace;
	class_def = classkeyword id lbrace member_def* rbrace;
	
	// Declarations
	member_decl = type_spec fun_direct_decl semi;
	primitive_type = 
		{void} void |
		{int} int |
		{bool} boolean |
		{string} stringtype;
	type_spec = 
		{primitive} primitive_type |
		{object} id |
		{array} type_spec lbrack rbrack;
	param_decl = type_spec direct_decl;
	direct_decl = 
		{var} var_direct_decl |
		{fun} fun_direct_decl;
	var_direct_decl =
		{id} id |
		{array} direct_decl lbrack rbrack;
	fun_direct_decl =
		{std} id lparen opt_param_decl_list rparen; 
	opt_param_decl_list =
		param_decl_list | 
		{empty};
	param_decl_list = 
		{single} param_decl |
		{multi} param_decl_list comma param_decl;

	// Definitions 
	member_def =
		{var} var_defs |
		{fun} fun_def |
		{constructor} constructor_def;
	var_defs = type_spec var_def_list semi;
	var_def_list = 
		{single} var_def |
		{multi} var_def_list comma var_def;
	var_def =
		{no_init} var_direct_decl |
		{with_init} var_direct_decl eq expr;
	fun_def = type_spec fun_direct_decl lbrace stmt* rbrace;
	constructor_def = fun_direct_decl lbrace stmt* rbrace;
	
	// Expressions
	number = 
		{int} integer |
		{octal} octal |
		{hex} hex |
		{float} float;
	expr = 
		{null} null |
		{true} true |
		{false} false |
		{number} number |
		{char} char |
		{string} string |
		{id} id;

	// Statements
	stmt = 
		{expr} expr semi |
		{empty} semi;
